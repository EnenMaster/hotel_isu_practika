package main

import (
	"database/sql"
	"log"
	"net/http"
	"os"

	"gohotel/internal/auth"
	"gohotel/internal/logging"

	_ "github.com/joho/godotenv/autoload" // .env ‚Üí ENV
	"github.com/gorilla/csrf"
	_ "github.com/lib/pq"

	"github.com/ulule/limiter/v3"
	"github.com/ulule/limiter/v3/drivers/middleware/stdlib"
	"github.com/ulule/limiter/v3/drivers/store/memory"
)

var db *sql.DB

func main() {
	//--------------------------------------------------------------------
	// 0. –õ–æ–≥–≥–µ—Ä
	//--------------------------------------------------------------------
	logging.Init()
	logging.L.Info("app_start")

	//--------------------------------------------------------------------
	// 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Postgres
	//--------------------------------------------------------------------
	dsn := os.Getenv("DB_DSN")
	if dsn == "" {
		dsn = "host=localhost port=5432 user=postgres password=postgres dbname=hotel_db sslmode=disable"
	}
	var err error
	db, err = sql.Open("postgres", dsn)
	if err != nil {
		log.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î:", err)
	}
	if err = db.Ping(); err != nil {
		log.Fatal("–ë–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:", err)
	}

	//--------------------------------------------------------------------
	// 2.  Rate-limit: 5 POST-–ø–æ–ø—ã—Ç–æ–∫ / –º–∏–Ω—É—Ç—É –Ω–∞ /login_post
	//--------------------------------------------------------------------
	rate, _ := limiter.NewRateFromFormatted("5-M")
	loginLimiter := stdlib.NewMiddleware(
		limiter.New(memory.NewStore(), rate),
		stdlib.WithErrorHandler(func(w http.ResponseWriter, _ *http.Request, _ error) {
			w.WriteHeader(http.StatusTooManyRequests)
			w.Write([]byte("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"))
		}),
	)

	//--------------------------------------------------------------------
	// 3.  CSRF-middleware
	//--------------------------------------------------------------------
	csrfKey := os.Getenv("CSRF_AUTH_KEY")          // üí° —á–∏—Ç–∞–µ–º –∫–ª—é—á
if len(csrfKey) == 0 {
    log.Fatal("CSRF_AUTH_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env") // –∏–ª–∏ –ø–∞–¥–∞–µ–º
}

csrfProt := csrf.Protect(
    []byte(csrfKey),
    csrf.Secure(false),
    csrf.Path("/"),
    csrf.TrustedOrigins([]string{
        "localhost:8080",
        "127.0.0.1:8080",
        // –µ—Å–ª–∏ –∑–∞—Ö–æ–¥–∏—Ç–µ —Å –¥—Ä—É–≥–æ–≥–æ –ü–ö –≤ —Å–µ—Ç–∏:
        "192.168.0.50:8080",
        // –µ—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥/SPA –Ω–∞ 3000:
        "localhost:3000",
    }),
)



	//--------------------------------------------------------------------
	// 4.  –†–æ—É—Ç–µ—Ä
	//--------------------------------------------------------------------
	mux := http.NewServeMux()
	

	// ------- –ø—É–±–ª–∏—á–Ω—ã–µ -------
	mux.Handle("/login", loginLimiter.Handler(http.HandlerFunc(loginHandler)))
	mux.Handle("/login_post", loginLimiter.Handler(http.HandlerFunc(loginHandler))) // POST

	mux.HandleFunc("/logout", logoutHandler)
	mux.Handle("/static/", http.StripPrefix("/static/", http.FileServer(http.Dir("static"))))

	// ------- –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ -------
	authOnly := auth.RequireAuth
	mux.Handle("/rooms",           authOnly(http.HandlerFunc(roomsListHandler)))
	mux.Handle("/rooms/add",       authOnly(http.HandlerFunc(roomAddHandler)))
	mux.Handle("/rooms/edit/",     authOnly(http.HandlerFunc(roomEditHandler)))
	mux.Handle("/rooms/delete/",   authOnly(http.HandlerFunc(roomDeleteHandler)))

	mux.Handle("/guests",          authOnly(http.HandlerFunc(guestsListHandler)))
	mux.Handle("/guests/edit/",    authOnly(http.HandlerFunc(guestEditHandler)))
	mux.Handle("/guests/delete/",  authOnly(http.HandlerFunc(guestDeleteHandler)))

	mux.Handle("/bookings",         authOnly(http.HandlerFunc(bookingsListHandler)))
	mux.Handle("/bookings/add",     authOnly(http.HandlerFunc(bookingAddHandler)))
	mux.Handle("/bookings/cancel/", authOnly(http.HandlerFunc(bookingCancelHandler)))

	// ------- —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω -------
	adminOnly := auth.RequireRole("admin")
	mux.Handle("/admin", adminOnly(http.HandlerFunc(adminPanelHandler)))
	mux.Handle("/users", adminOnly(http.HandlerFunc(usersHandler)))

	//--------------------------------------------------------------------
	// 5.  –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –ª–æ–≥-middleware –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	//--------------------------------------------------------------------
	root := logging.Access(mux)

	log.Println("server started at :8080")
	log.Fatal(http.ListenAndServe(
    ":8080",
    csrfProt(root),   // <- –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º root —á–µ—Ä–µ–∑ csrfProt
))
}
